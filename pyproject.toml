[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
name = "rxio"
version = "0.2.0-dev"
description = "Scalable Reactive Programming in modern Python"
authors = ["Joren Hammudoglu <jhammudoglu@gmail.com>"]
readme = "README.md"
license = "BSD-3-Clause"
repository = "https://github.com/jorenham/rxio"

[tool.poetry.dependencies]
python = "^3.12"
optype = "^0.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.1.1"
hypothesis = "^6.99.0"
pyright = "^1.1.353"
ruff = "^0.3.2"
codespell = "^2.2.6"
ipython = "^8.22.2"


[tool.codespell]
context = 2
ignore-words-list = """\
    ot,\
    cange\
"""
skip = """\
    ./.venv,\
    ./.vscode,\
    *.lock,\
    *.pyc\
"""


[tool.pyright]
include = ["rxio", "tests"]
exclude = [
    "**/__pycache__",
    "**/.vscode",
    ".venv",
    ".git",
    ".github",
    ".pytest_cache",
    ".ruff_cache",
    "dist",
]
stubPath = "."
venvPath = "."
venv = ".venv"
pythonVersion = "3.12"
pythonPlatform = "All"
typeCheckingMode = "strict"
useLibraryCodeForTypes = false

strictListInference = true
strictDictionaryInference = true
strictSetInference = true
deprecateTypingAliases = true
disableBytesTypePromotions = true
reportPropertyTypeMismatch = "error"
reportMissingTypeStubs = "error"
reportImportCycles = "error"
reportUnusedImport = "none"  # already covered by ruff
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"
reportConstantRedefinition = "error"
reportInconsistentConstructor = "error"
reportMissingTypeArgument = "error"
reportUninitializedInstanceVariable = "error"
reportCallInDefaultInitializer = "error"
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryContains = "warning"
reportImplicitStringConcatenation = "none"
reportInvalidStubStatement = "error"
reportIncompleteStub = "error"
# reportUnusedCallResult = "warning"
reportUnusedCoroutine = "error"
reportUnusedExpression = "warning"
reportUnnecessaryTypeIgnoreComment = "error"
reportMatchNotExhaustive = "error"
reportImplicitOverride = "warning"
reportShadowedImports = "error"


[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["rxio", "tests"]
addopts = ["-ra", "--doctest-modules"]
doctest_optionflags = [
    "NORMALIZE_WHITESPACE",
    "IGNORE_EXCEPTION_DETAIL",
    "ELLIPSIS",
]
filterwarnings = ["error"]
xfail_strict = true


[tool.ruff]
src = ["rxio", "tests"]
target-version = "py312"
line-length = 79
indent-width = 4
show-fixes = true
force-exclude = true
extend-exclude = [".github", ".venv", ".vscode"]

[tool.ruff.lint]
ignore-init-module-imports = true
preview = true
select = [
    "F",        # pyflakes
    "E",        # pycodestyle-error
    "W",        # pycodestyle-warning
    "C90",      # mccabe
    "I",        # isort
    "N",        # pep8-naming
    "UP",       # pyupgrade
    "YTT",      # flake8-2020
    "ANN",      # flake8-annotations
    "ASYNC",    # flake8-async
    "TRIO",     # flake8-trio
    "S",        # flake8-bandit
    "BLE",      # flake8-blind-except
    "B",        # flake8-bugbear
    "A",        # flake8-builtins
    "COM",      # flake8-commas
    "C4",       # flake8-comprehensions
    "DTZ",      # flake8-datetimez
    "T10",      # flake8-debugger
    "EXE",      # flake8-executable
    "FA",       # flake8-future-annotations
    "ISC",      # flake8-implicit-str-concat
    "ICN",      # flake8-import-conventions
    "LOG",      # flake8-logging
    "G",        # flake8-logging-format
    "INP",      # flake8-no-pep420
    "PIE",      # flake8-pie
    "T20",      # flake8-print
    "PYI",      # flake8-pyi
    "PT",       # flake8-pytest-style
    "Q",        # flake8-quotes
    "RSE",      # flake8-raise
    "RET",      # flake8-return
    "SLF",      # flake8-self
    "SLOT",     # flake8-slots
    "SIM",      # flake8-simplify
    "TID",      # flake8-tidy-imports
    "TCH",      # flake8-type-checking
    "ARG",      # flake8-unused-arguments
    "PTH",      # flake8-use-pathlib
    "PD",       # pandas-vet
    "PGH",      # pygrep-hooks
    "PL",       # pylint
    "TRY",      # tryceratops
    "FLY",      # flynt
    "NPY",      # numpy
    "PERF",     # perflint
    "FURB",     # refurb
    "RUF",      # ruff
]
extend-ignore = [
    # flake8-annotations
    "ANN001",   # missing-type-function-argument (deprecated)
    "ANN002",   # missing-type-args (deprecated)
    "ANN401",   # any-type (cmon, sometimes `Any` is the only option...)

    # flake8-bandit
    "S101",     # assert_used (ever heard of the `-O` CLI flag?)

    # flake8-pyi
    "PYI034",   # no-self-return-type (`int.__iadd__` did nothing wrong!)

    # pylint
    "PLW1641",  # eq-without-hash (stop bullying `dict` and `set`!)

    # tryceratops
    "TRY003",   # raise-vanilla-args (what's wrong with error messages?)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    # flake8-annotations
    "ANN201",   # missing-return-type-undocumented-public-function
]

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.pylint]
allow-dunder-method-names = [
    "__rx_bases__",
    "__rx_state__",
    "__rx_item__",
    "__rx_get__",
    "__rx_set__",
    "__rx_update__",
    "__rx_invalidate__",
    "__rx_atomic__",
]

[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true
force-wrap-aliases = true
known-first-party = ["rxio"]
lines-between-types = 0
lines-after-imports = 2

[tool.ruff.format]
# keep in sync with .editorconfig
line-ending = "lf"
indent-style = "space"
quote-style = "single"
docstring-code-format = true
skip-magic-trailing-comma = true
